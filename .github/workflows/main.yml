name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy_lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changed files
        id: src-files
        uses: tj-actions/changed-files@v40.1.1
        with:
          files: |
            src/**
            package*.json

      - name: Configure AWS Credentials
        if: steps.src-files.outputs.any_changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Deploy to AWS
        if: steps.src-files.outputs.any_changed == 'true'
        id: deploy-to-aws
        run: |
          npm ci || npm i
          npx @vercel/ncc build ./src/index.mjs -m -e @aws-sdk/client-sts
          zip -j deploy.zip ./dist/*
          aws lambda update-function-code --function-name `echo $(jq -r '.FunctionName' lambda.config.json)` --zip-file=fileb://deploy.zip 2> deploy.err || true
          echo "::set-output name=error::$(grep -ohw 'deploy.err' -e 'Function not found')"
    outputs:
      aws-err: ${{ steps.deploy-to-aws.outputs.error }}

  create_lambda:
    runs-on: ubuntu-latest
    needs: deploy_lambda
    if: ${{ always() && needs.deploy_lambda.outputs.aws-err == 'Function not found' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Get aws error from deploy job
        env:
          DEPLOY_OUTPUT: ${{ needs.deploy_lambda.outputs.aws-err }}
        run: |
          echo "$DEPLOY_OUTPUT"

      - name: Get account info
        run: |
          echo "ACCOUNT_ID=`echo $(aws sts get-caller-identity | jq -r '.Account')`" >> $GITHUB_ENV

      - name: Set role name
        run: echo "ROLE_NAME=`echo $(jq -r '.Role' lambda.config.json)`" >> $GITHUB_ENV

      - name: Check if role exists
        id: check-role
        run: |
          aws iam get-role --role-name $ROLE_NAME 2> check.err || true
          echo $(grep -ohw 'check.err' -e 'cannot be found')
          echo "::set-output name=error::$(grep -ohw 'check.err' -e 'cannot be found')"

      - name: Create role
        if: ${{ steps.check-role.outputs.error == 'cannot be found' }}
        run: |
          aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document '{"Version": "2012-10-17","Statement": [{ "Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}'
          aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn "arn:aws:iam::aws:policy/AWSLambda_FullAccess"

      - name: Generate lambda config file
        run: |
          jq -r --arg ROLE_ARN "arn:aws:iam::$ACCOUNT_ID:role/$ROLE_NAME" '.Role = $ROLE_ARN' lambda.config.json > lambda.json

      - name: Create lambda function
        run: |
          echo "Create function"
          npm ci || npm i
          npx @vercel/ncc build ./src/index.mjs -m -e @aws-sdk/client-sts
          zip -j deploy.zip ./dist/*
          aws lambda create-function --cli-input-json file://lambda.json --zip-file=fileb://deploy.zip

  update_lambda:
    runs-on: ubuntu-latest
    needs: deploy_lambda
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify Changed config
        uses: tj-actions/changed-files@v40.1.1
        id: verify-changed-config
        with:
          files: lambda.config.json

      - name: Configure AWS Credentials
        if: steps.verify-changed-config.outputs.any_changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get account info
        if: steps.verify-changed-config.outputs.any_changed == 'true'
        run: |
          echo "ACCOUNT_ID=`echo $(aws sts get-caller-identity | jq -r '.Account')`" >> $GITHUB_ENV

      - name: Set role name
        if: steps.verify-changed-config.outputs.any_changed == 'true'
        run: echo "ROLE_NAME=`echo $(jq -r '.Role' lambda.config.json)`" >> $GITHUB_ENV

      - name: Update lambda configuration
        if: steps.verify-changed-config.outputs.any_changed == 'true'
        run: |
          jq -r --arg ROLE_ARN "arn:aws:iam::$ACCOUNT_ID:role/$ROLE_NAME" '.Role = $ROLE_ARN' lambda.config.json > lambda.json
          aws lambda update-function-configuration --cli-input-json file://lambda.json

